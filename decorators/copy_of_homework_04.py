# -*- coding: utf-8 -*-
"""Copy of homework_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-nC3XQpOoTQbeP5H0AmZjL2fYDfkwIx

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re

from random import randint
from functools import wraps

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

import time

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        print(f'Время выполнения функции {func.__name__}: {end - start}')
        return result
    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        print('Функция была вызвана с параметрами:')
        print(f'{args}, {kwargs}')
        value = func(*args, **kwargs)
        return value

    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """
    def wrapper(*args, **kwargs):
        wrapper.count += 1
        print(f'Функция была вызвана {wrapper.count} раз')
        return func(*args, **kwargs)
    wrapper.count = 0
    return wrapper

"""## Задание 4"""

import functools
def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}
  @functools.wraps(func)
  def fmemo(*args):
    if tuple(args) in cache:
        return cache[tuple(args)]
    value = func(*args)
    cache[tuple(args)] = value
    return value

  fmemo.cache = cache
  return fmemo

@memo
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n-2) + fibonacci(n-1)

fibonacci(5)

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('whole'))

@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
fib(5)

@benchmark
@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
fib(5)